import streamlit as st
import pandas as pd
import plotly.express as px

# ---------------------------------------
# Configura√ß√£o inicial
# ---------------------------------------
st.set_page_config(
    page_title="Calculadora de Pegada de Carbono Escolar",
    page_icon="üå±",
    layout="wide"
)

st.title("üåç Calculadora de Pegada de Carbono Escolar")
st.markdown("""
Esta ferramenta estima a **pegada de carbono anual (t CO‚ÇÇe/ano)** da sua escola considerando:
- Transporte institucional
- Consumo de energia e √°gua
- Gera√ß√£o de res√≠duos
- N√∫mero de pessoas (funcion√°rios e estudantes)
- Infraestrutura f√≠sica
- Compensa√ß√µes (plantio de √°rvores e medidas adicionais)

Os c√°lculos s√£o baseados em **fatores de emiss√£o m√©dios** de fontes como **IPCC**, **EPA**, **GHG Protocol** e **ANEEL**.
""")

# ---------------------------------------
# Entradas
# ---------------------------------------
st.header("üìå Informa√ß√µes da Escola")
col1, col2, col3 = st.columns(3)
with col1:
    nome_escola = st.text_input("Nome da escola", placeholder="Informe o nome da escola")
with col2:
    municipio_escola = st.text_input("Munic√≠pio", placeholder="Informe o munic√≠pio")
with col3:
    pais = st.selectbox("Pa√≠s", ["Brasil", "Fran√ßa", "Outro"], index=0)

# Transporte institucional
st.subheader("üöê Transporte Institucional")
col1, col2, col3 = st.columns(3)
with col1:
    num_veiculos = st.number_input("N√∫mero de ve√≠culos", min_value=0, step=1)
with col2:
    num_viagens_mes = st.number_input("N√∫mero de viagens por m√™s", min_value=0, step=1)
with col3:
    consumo_combustivel = st.number_input("Consumo mensal de combust√≠vel (litros)", min_value=0.0, step=0.1)

# Pessoas
st.subheader("üë©‚Äçüè´ Pessoas")
col1, col2 = st.columns(2)
with col1:
    num_funcionarios = st.number_input("N√∫mero de funcion√°rios", min_value=0, step=1)
with col2:
    num_estudantes = st.number_input("N√∫mero de estudantes", min_value=0, step=1)

# Infraestrutura
st.subheader("üè´ Infraestrutura")
col1, col2, col3, col4 = st.columns(4)
with col1:
    num_salas_aula = st.number_input("Salas de aula", min_value=0, step=1)
with col2:
    num_salas_adm = st.number_input("Salas administrativas", min_value=0, step=1)
with col3:
    num_laboratorios = st.number_input("Laborat√≥rios", min_value=0, step=1)
with col4:
    num_auditorios = st.number_input("Audit√≥rios", min_value=0, step=1)

# Energia
st.subheader("‚ö° Energia")
col1, col2, col3 = st.columns(3)
with col1:
    consumo_energia = st.number_input("Consumo m√©dio mensal (kWh)", min_value=0.0, step=0.1)
with col2:
    possui_geracao_propria = st.selectbox("Possui gera√ß√£o pr√≥pria de energia?", ["N√£o", "Sim"])
with col3:
    geracao_energia = st.text_input("Tipo e quantidade gerada mensalmente (kWh)", placeholder="Ex: Solar, 500 kWh/m√™s")

# √Ågua
st.subheader("üíß √Ågua")
consumo_agua = st.number_input("Consumo m√©dio mensal de √°gua (litros)", min_value=0.0, step=10.0)

# Lixo
st.subheader("üóëÔ∏è Gera√ß√£o de Lixo")
volume_lixo = st.number_input("Volume de lixo gerado por m√™s (kg)", min_value=0.0, step=1.0)

# Compensa√ß√£o
st.subheader("üå≥ Medidas de Compensa√ß√£o")
arvores = st.number_input("√Årvores plantadas", min_value=0, step=1)

st.markdown("#### Outras Medidas Customizadas")
st.caption("Estime a quantidade de CO‚ÇÇe evitada ou reduzida por cada a√ß√£o (em kg CO‚ÇÇe/ano).")

col1, col2 = st.columns(2)
with col1:
    meliponario = st.number_input("üêù Cria√ß√£o de melipon√°rio no campus", min_value=0.0, step=1.0, help="Melhora da biodiversidade e sequestro indireto de carbono")
    reducao_agua = st.number_input("üíß Redu√ß√£o no gasto com √°gua", min_value=0.0, step=1.0, help="Ex: Uso de cisternas, re√∫so de √°gua")
    reducao_energia = st.number_input("‚ö° Redu√ß√£o no gasto com energia", min_value=0.0, step=1.0, help="Ex: Instala√ß√£o de pain√©is solares")
with col2:
    otimizacao_viagens = st.number_input("üöê Otimiza√ß√£o de viagens", min_value=0.0, step=1.0, help="Ex: Melhor planejamento de rotas e transporte coletivo")
    reducao_lixo = st.number_input("üóëÔ∏è Redu√ß√£o de lixo produzido", min_value=0.0, step=1.0, help="Ex: Compostagem, reciclagem")

st.markdown("---")

# ---------------------------------------
# C√°lculos
# ---------------------------------------
if st.button("Calcular Pegada de Carbono"):
    # --- Fatores de emiss√£o aproximados ---
    fator_combustivel = 2.31  # kg CO2e/litro
    fator_energia = 0.084     # kg CO2e/kWh
    fator_agua = 0.0003       # kg CO2e/litro
    fator_lixo = 1.9          # kg CO2e/kg lixo
    fator_arvore = 22         # kg CO2e/√°rvore/ano
    fator_pessoa = 500        # kg CO2e/pessoa/ano

    # Infraestrutura: estimativa
    fator_sala_aula = 150
    fator_sala_adm = 100
    fator_lab = 300
    fator_auditorio = 500

    # --- C√°lculo por setor ---
    emissao_transporte = consumo_combustivel * fator_combustivel * 12
    emissao_energia = consumo_energia * fator_energia * 12
    emissao_agua = consumo_agua * fator_agua * 12
    emissao_lixo = volume_lixo * fator_lixo * 12
    total_pessoas = num_funcionarios + num_estudantes
    emissao_pessoas = total_pessoas * fator_pessoa
    emissao_infra = (
        num_salas_aula * fator_sala_aula +
        num_salas_adm * fator_sala_adm +
        num_laboratorios * fator_lab +
        num_auditorios * fator_auditorio
    )

    # --- Total e compensa√ß√£o ---
    emissao_total_kg = (
        emissao_transporte + emissao_energia + emissao_agua +
        emissao_lixo + emissao_pessoas + emissao_infra
    )

    # Compensa√ß√µes customizadas
    compensacoes_custom_kg = (
        meliponario +
        reducao_agua +
        reducao_energia +
        otimizacao_viagens +
        reducao_lixo
    )

    # Compensa√ß√£o total
    compensacao_kg = (arvores * fator_arvore) + compensacoes_custom_kg
    emissao_liquida_t = (emissao_total_kg - compensacao_kg) / 1000
    emissao_total_t = emissao_total_kg / 1000

    # ---------------------------------------
    # Resultados
    # ---------------------------------------
    st.success(f"üå± **Pegada de carbono estimada (total): {emissao_total_t:.2f} t CO‚ÇÇe/ano**")
    st.info(f"Ap√≥s compensa√ß√µes (√°rvores + customizadas): **{emissao_liquida_t:.2f} t CO‚ÇÇe/ano**")

    # ---------------------------------------
    # Gr√°ficos
    # ---------------------------------------
    data = {
        "Setor": [
            "Transporte", "Energia", "√Ågua", "Lixo",
            "Pessoas (funcion√°rios + estudantes)",
            "Infraestrutura"
        ],
        "Emiss√µes (kg CO‚ÇÇe/ano)": [
            emissao_transporte, emissao_energia, emissao_agua,
            emissao_lixo, emissao_pessoas, emissao_infra
        ]
    }
    df = pd.DataFrame(data)

    col1, col2 = st.columns([2, 1])
    with col1:
        fig = px.pie(
            df,
            values="Emiss√µes (kg CO‚ÇÇe/ano)",
            names="Setor",
            title="Distribui√ß√£o das Emiss√µes por Setor",
            color_discrete_sequence=px.colors.sequential.RdBu
        )
        st.plotly_chart(fig, use_container_width=True)
    with col2:
        st.subheader("Resumo Num√©rico")
        st.dataframe(df.style.format({"Emiss√µes (kg CO‚ÇÇe/ano)": "{:.2f}"}))

    # ---------------------------------------
    # Relat√≥rio Detalhado
    # ---------------------------------------
    st.markdown("---")
    st.subheader("üìä Relat√≥rio Detalhado")

    st.markdown(f"""
    ### Resumo geral
    - **Nome da Escola:** {nome_escola}
    - **Munic√≠pio:** {municipio_escola}
    - **Pa√≠s:** {pais}
    - **Total de pessoas:** {total_pessoas} (Funcion√°rios: {num_funcionarios}, Estudantes: {num_estudantes})
    - **Emiss√µes totais (sem compensa√ß√µes):** {emissao_total_t:.2f} t CO‚ÇÇe/ano
    - **Compensa√ß√£o total:** {compensacao_kg/1000:.2f} t CO‚ÇÇe/ano
    - **Emiss√µes l√≠quidas:** {emissao_liquida_t:.2f} t CO‚ÇÇe/ano
    """)

    st.markdown("### Detalhes das compensa√ß√µes customizadas")
    st.markdown(f"""
    - **Cria√ß√£o de melipon√°rio:** {meliponario:.2f} kg CO‚ÇÇe/ano  
    - **Redu√ß√£o no gasto com √°gua:** {reducao_agua:.2f} kg CO‚ÇÇe/ano  
    - **Redu√ß√£o no gasto com energia:** {reducao_energia:.2f} kg CO‚ÇÇe/ano  
    - **Otimiza√ß√£o de viagens:** {otimizacao_viagens:.2f} kg CO‚ÇÇe/ano  
    - **Redu√ß√£o de lixo produzido:** {reducao_lixo:.2f} kg CO‚ÇÇe/ano  
    """)

    st.markdown("### Observa√ß√µes")
    st.caption("""
    ‚ö†Ô∏è Os valores das compensa√ß√µes customizadas devem ser informados manualmente, 
    com base em estudos ou estimativas locais.  
    Essa flexibilidade permite incluir projetos inovadores e adapta√ß√µes espec√≠ficas de cada campus.
    """)

    st.markdown("### F√≥rmulas utilizadas")
    st.markdown("""
    - **Transporte:** Consumo mensal (L) √ó 2,31 √ó 12  
    - **Energia:** Consumo mensal (kWh) √ó 0,084 √ó 12  
    - **√Ågua:** Consumo mensal (L) √ó 0,0003 √ó 12  
    - **Lixo:** Volume mensal (kg) √ó 1,9 √ó 12  
    - **Pessoas:** Total de pessoas √ó 500 kg CO‚ÇÇe/ano  
    - **Compensa√ß√£o total:** √Årvores √ó 22 + Somat√≥rio das compensa√ß√µes customizadas
    """)

    st.write("---")
    st.caption("‚ö†Ô∏è Essa calculadora √© um prot√≥tipo educacional. Para invent√°rios oficiais, siga o GHG Protocol e a ISO 14064/14067.")
